package("spirv-reflect")
    set_homepage("https://github.com/KhronosGroup/SPIRV-Reflect")
    set_description("SPIRV-Reflect is a lightweight library that provides a C/C++ reflection API for SPIR-V shader bytecode in Vulkan applications.")
    set_license("Apache-2.0")

    add_urls("https://github.com/KhronosGroup/SPIRV-Reflect.git")
    add_versions("1.2.154+1", "5de48fe8d3ef434e846d64ed758adc5d26335ae5")
    add_versions("1.2.162+0", "481e34d666031eae28423f3b723a1a8c717d7636")
    add_versions("1.2.189+1", "272e050728de8d4a4ce9e7101c1244e6ff56e5b0")
    add_versions("1.3.231+1", "b68b5a8a5d8ab5fce79e6596f3a731291046393a")
    add_versions("1.3.250+1", "1fd43331f0bd77cc0f421745781f79a14d8f2bb1")
    add_versions("1.3.261+1", "d7e316e7d592d16ac58f1fe39b1df7babfe65c0d")
    add_versions("1.3.268+0", "3f468129720eded0cef4077302e491036d099856")
    add_versions("1.3.275+0", "2f7460f0be0f73c9ffde719bc3e924b4250f4d98")
    add_versions("1.3.280+0", "8406f76dcf6cca11fe430058c4f0ed4b846f3be4")
    add_versions("1.3.283+0", "ee5b57fba6a986381f998567761bbc064428e645")
    add_versions("1.3.290+0", "b4dc70d8e6ac30c719a2d05b8ad05e1d277c92b4")

    add_configs("shared", {description = "Build shared library.", default = false, type = "boolean", readonly = true})

    add_deps("spirv-headers")

    on_install("windows", "linux", "macosx", "mingw", "android", function (package)
        io.gsub("spirv_reflect.h", "#include \"%.%/include%/spirv%/unified1%/spirv.h\"", "#include \"spirv/unified1/spirv.h\"")
        io.writefile("xmake.lua", [[
            add_rules("mode.debug", "mode.release")
            add_requires("spirv-headers")
            target("spirv-reflect-static")
                set_kind("static")
                add_packages("spirv-headers", {public = true})
                add_files("spirv_reflect.c")
                add_headerfiles("spirv_reflect.h")
            target("spirv-reflect")
                set_kind("binary")
                set_languages("c++11")
                add_deps("spirv-reflect-static")
                add_includedirs(".")
                add_files("main.cpp", "examples/arg_parser.cpp", "examples/common.cpp", "common/output_stream.cpp")
        ]])
        import("package.tools.xmake").install(package)
    end)

    on_test(function (package)
        assert(package:has_cfuncs("spvReflectGetCodeSize", {includes = "spirv_reflect.h"}))
    end)
