diff --git a/AssetLoader/CMakeLists.txt b/AssetLoader/CMakeLists.txt
index 2d147c2..540ad49 100644
--- a/AssetLoader/CMakeLists.txt
+++ b/AssetLoader/CMakeLists.txt
@@ -28,6 +28,8 @@ PUBLIC
     interface
 PRIVATE
     include
+    ${diligentcore_INCLUDEDIR}
+    ${tinygltf_INCLUDEDIR}
 )
 
 source_group("source" FILES ${SOURCE})
@@ -46,38 +48,14 @@ PRIVATE
     Diligent-JSON
 )
 
-if (TARGET draco OR TARGET draco_static)
-    if(TARGET draco)
-        set(DRACO_TARGET draco)
-    else()
-        set(DRACO_TARGET draco_static)
-    endif()
-    target_link_libraries(Diligent-AssetLoader PRIVATE ${DRACO_TARGET})
-    get_target_property(DRACO_SOURCE_DIR ${DRACO_TARGET} SOURCE_DIR)
+if (DILIGENT_ENABLE_DRACO)
+    target_link_libraries(Diligent-AssetLoader PRIVATE ${draco_LINK_LIBRARIES})
     target_compile_definitions(Diligent-AssetLoader PRIVATE TINYGLTF_ENABLE_DRACO)
-    target_include_directories(Diligent-AssetLoader PRIVATE "${DRACO_SOURCE_DIR}/src" "${CMAKE_BINARY_DIR}")
-elseif (DRACO_PATH)
-    find_library(DRACO_LIBRARY NAMES draco draco_static PATHS "${DRACO_PATH}/lib")
-    if(DRACO_LIBRARY)
-        target_link_libraries(Diligent-AssetLoader PRIVATE ${DRACO_LIBRARY})
-        target_include_directories(Diligent-AssetLoader PRIVATE "${DRACO_PATH}/include")
-        target_compile_definitions(Diligent-AssetLoader PRIVATE TINYGLTF_ENABLE_DRACO)
-    else()
-        message(WARNING "Unable to find draco library. Draco support will be disabled")
-    endif()
+    target_include_directories(Diligent-AssetLoader PRIVATE "${draco_INCLUDEDIR}")
 endif()
 
 if(DILIGENT_USE_RAPIDJSON)
-    FetchContent_DeclareShallowGit(
-        rapidjson
-        GIT_REPOSITORY https://github.com/Tencent/rapidjson
-        GIT_TAG        ab1842a2dae061284c0a62dca1cc6d5e7e37e346
-    )
-    set(RAPIDJSON_BUILD_DOC OFF)
-    set(RAPIDJSON_BUILD_EXAMPLES OFF)
-    set(RAPIDJSON_BUILD_TESTS OFF)
-    FetchContent_MakeAvailable(rapidjson)
-    target_include_directories(Diligent-AssetLoader PRIVATE ${rapidjson_SOURCE_DIR}/include/rapidjson)
+    target_include_directories(Diligent-AssetLoader PRIVATE ${rapidjson_INCLUDEDIR}/rapidjson)
     target_compile_definitions(Diligent-AssetLoader PRIVATE TINYGLTF_USE_RAPIDJSON TINYGLTF_USE_RAPIDJSON_CRTALLOCATOR)
 endif()
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 212a82e..afede0f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -21,23 +21,116 @@ function(install_tools_lib _TARGET)
     if(TARGET_TYPE STREQUAL STATIC_LIBRARY)
         list(APPEND DILIGENT_TOOLS_INSTALL_LIBS_LIST ${_TARGET})
         set(DILIGENT_TOOLS_INSTALL_LIBS_LIST ${DILIGENT_TOOLS_INSTALL_LIBS_LIST} CACHE INTERNAL "Diligent tools libraries installation list")
+        install(TARGETS				 ${_TARGET}
+                ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+                LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+        )
+        if (DILIGENT_INSTALL_PDB)
+            install(FILES $<TARGET_PDB_FILE:${_TARGET}> DESTINATION "${CMAKE_INSTALL_BINDIR}" OPTIONAL)
+        endif()
     elseif(TARGET_TYPE STREQUAL SHARED_LIBRARY)
         install(TARGETS				 ${_TARGET}
-                ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>"
-                LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>"
-                RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>"
+                ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+                LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
         )
         if (DILIGENT_INSTALL_PDB)
-            install(FILES $<TARGET_PDB_FILE:${_TARGET}> DESTINATION "${CMAKE_INSTALL_BINDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>" OPTIONAL)
+            install(FILES $<TARGET_PDB_FILE:${_TARGET}> DESTINATION "${CMAKE_INSTALL_BINDIR}" OPTIONAL)
         endif()
     endif()
 
     if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/interface")
         install(DIRECTORY    interface
-                DESTINATION  "${CMAKE_INSTALL_INCLUDEDIR}/${TARGET_RELATIVE_PATH}/"
+                DESTINATION  "include/DiligentTools/${TARGET_RELATIVE_PATH}"
         )
     endif()
 endfunction()
+include(FindPkgConfig)
+include(BuildUtils.cmake)
+add_library(Diligent-PublicBuildSettings INTERFACE)
+if(PLATFORM_WIN32)
+    set(GL_SUPPORTED       TRUE CACHE INTERNAL "OpenGL is supported on Win32 platform")
+    set(VULKAN_SUPPORTED   TRUE CACHE INTERNAL "Vulkan is supported on Win32 platform")
+    set(WEBGPU_SUPPORTED   TRUE CACHE INTERNAL "WebGPU is supported on Win32 platform")
+    set(ARCHIVER_SUPPORTED TRUE CACHE INTERNAL "Archiver is supported on Win32 platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_WIN32=1)
+elseif(PLATFORM_UNIVERSAL_WINDOWS)
+    set(ARCHIVER_SUPPORTED TRUE CACHE INTERNAL "Archiver is supported on Universal Windows platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_UNIVERSAL_WINDOWS=1)
+elseif(PLATFORM_ANDROID)
+    set(GLES_SUPPORTED     TRUE CACHE INTERNAL "OpenGLES is supported on Android platform")
+    set(VULKAN_SUPPORTED   TRUE CACHE INTERNAL "Vulkan is supported on Android platform")
+    set(ARCHIVER_SUPPORTED TRUE CACHE INTERNAL "Archiver is supported on Android platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_ANDROID=1)
+elseif(PLATFORM_LINUX)
+    set(GL_SUPPORTED       TRUE CACHE INTERNAL "OpenGL is supported on Linux platform")
+    set(VULKAN_SUPPORTED   TRUE CACHE INTERNAL "Vulkan is supported on Linux platform")
+    set(ARCHIVER_SUPPORTED TRUE CACHE INTERNAL "Archiver is supported on Linux platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_LINUX=1)
+elseif(PLATFORM_MACOS)
+    set(GL_SUPPORTED       TRUE CACHE INTERNAL "OpenGL is supported on MacOS platform")
+    set(VULKAN_SUPPORTED   TRUE CACHE INTERNAL "Vulkan is enabled through MoltenVK on MacOS platform")
+    set(ARCHIVER_SUPPORTED TRUE CACHE INTERNAL "Archiver is supported on MacOS platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_MACOS=1 PLATFORM_APPLE=1)
+elseif(PLATFORM_IOS)
+    set(GLES_SUPPORTED TRUE CACHE INTERNAL "OpenGLES is supported on iOS platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_IOS=1 PLATFORM_APPLE=1)
+elseif(PLATFORM_TVOS)
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_TVOS=1 PLATFORM_APPLE=1)
+elseif(PLATFORM_WEB)
+    set(GLES_SUPPORTED     TRUE CACHE INTERNAL "OpenGLES is supported on Web platform")
+    set(WEBGPU_SUPPORTED   TRUE CACHE INTERNAL "WebGPU is supported on Web platform")
+    set(ARCHIVER_SUPPORTED TRUE CACHE INTERNAL "Archiver is supported on Web platform")
+    target_compile_definitions(Diligent-PublicBuildSettings INTERFACE PLATFORM_WEB=1 PLATFORM_EMSCRIPTEN=1)
+else()
+    message(FATAL_ERROR "No PLATFORM_XXX variable defined. Make sure that 'DiligentCore' folder is processed first")
+endif()
+target_compile_definitions(Diligent-PublicBuildSettings
+INTERFACE
+    D3D11_SUPPORTED=$<BOOL:${D3D11_SUPPORTED}>
+    D3D12_SUPPORTED=$<BOOL:${D3D12_SUPPORTED}>
+    GL_SUPPORTED=$<BOOL:${GL_SUPPORTED}>
+    GLES_SUPPORTED=$<BOOL:${GLES_SUPPORTED}>
+    VULKAN_SUPPORTED=$<BOOL:${VULKAN_SUPPORTED}>
+    METAL_SUPPORTED=$<BOOL:${METAL_SUPPORTED}>
+    WEBGPU_SUPPORTED=$<BOOL:${WEBGPU_SUPPORTED}>
+)
+add_library(Diligent-BuildSettings INTERFACE)
+if (PLATFORM_WEB)
+    target_compile_options(Diligent-BuildSettings INTERFACE
+        "-pthread"
+        "-mbulk-memory"
+    )
+endif()
+target_link_libraries(Diligent-BuildSettings INTERFACE Diligent-PublicBuildSettings)
+if(PLATFORM_WIN32)
+	set(Diligent-TargetPlatform Diligent-Win32Platform)
+elseif(PLATFORM_UNIVERSAL_WINDOWS)
+	set(Diligent-TargetPlatform Diligent-UniversalWindowsPlatform)
+elseif(PLATFORM_ANDROID)
+	set(Diligent-TargetPlatform Diligent-AndroidPlatform)
+elseif(PLATFORM_LINUX)
+	set(Diligent-TargetPlatform Diligent-LinuxPlatform)
+elseif(PLATFORM_MACOS OR PLATFORM_IOS OR PLATFORM_TVOS)
+	set(Diligent-TargetPlatform Diligent-ApplePlatform)
+elseif(PLATFORM_WEB)
+	set(Diligent-TargetPlatform Diligent-EmscriptenPlatform)
+else()
+	message(FATAL_ERROR "No PLATFORM_XXX variable defined. Make sure that 'DiligentCore' folder is processed first")
+endif()
+add_library(Diligent-PlatformInterface INTERFACE)
+target_include_directories(Diligent-PlatformInterface INTERFACE ${diligentcore_INCLUDEDIR}/DiligentCore/Platforms/interface)
+add_library(Diligent-GraphicsEngineInterface INTERFACE)
+target_include_directories(Diligent-GraphicsEngineInterface
+INTERFACE
+    ${diligentcore_INCLUDEDIR}/Graphics/GraphicsEngine/interface
+)
+target_link_libraries(Diligent-GraphicsEngineInterface
+INTERFACE
+    Diligent-Primitives
+    Diligent-PublicBuildSettings
+)
 
 add_subdirectory(ThirdParty)
 add_subdirectory(TextureLoader)
@@ -46,7 +139,6 @@ add_subdirectory(Imgui)
 add_subdirectory(NativeApp)
 
 if((PLATFORM_WIN32 OR PLATFORM_LINUX OR PLATFORM_MACOS) AND GL_SUPPORTED)
-    add_subdirectory(HLSL2GLSLConverter)
 endif()
 
 add_subdirectory(RenderStateNotation)
@@ -55,7 +147,6 @@ if((PLATFORM_WIN32 OR PLATFORM_LINUX OR PLATFORM_MACOS) AND ARCHIVER_SUPPORTED A
     add_subdirectory(RenderStatePackager)
 endif()
 
-add_subdirectory(Tests)
 
 # Installation instructions
 if(DILIGENT_INSTALL_TOOLS)
@@ -65,10 +156,9 @@ if(DILIGENT_INSTALL_TOOLS)
         "${DILIGENT_TOOLS_INSTALL_LIBS_LIST}"
         DiligentTools-static                     # Custom target name
         DiligentTools                            # Folder
-        "${CMAKE_INSTALL_LIBDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>"    # Install destination
+        "${CMAKE_INSTALL_LIBDIR}"    # Install destination
     )
 
 endif()
 
 # Create a custom target to run source code formatting validation command
-add_format_validation_target(DiligentTools "${CMAKE_CURRENT_SOURCE_DIR}" DiligentTools)
diff --git a/Imgui/CMakeLists.txt b/Imgui/CMakeLists.txt
index 73b412c..d38827c 100644
--- a/Imgui/CMakeLists.txt
+++ b/Imgui/CMakeLists.txt
@@ -52,8 +52,9 @@ add_library(Diligent-Imgui STATIC
     ${IMGUIZMO_QUAT_SOURCE}
 )
 
-if(TARGET imgui)
-    target_link_libraries(Diligent-Imgui PRIVATE imgui)
+if(1)
+    target_link_libraries(Diligent-Imgui PRIVATE ${imgui_LINK_LIBRARIES})
+    target_include_directories(Diligent-Imgui PRIVATE ${imgui_INCLUDEDIR} ${diligentcore_INCLUDEDIR})
 else()
     set(DEAR_IMGUI_INTERFACE
         ${DILIGENT_DEAR_IMGUI_PATH}/imgui.h
diff --git a/NativeApp/CMakeLists.txt b/NativeApp/CMakeLists.txt
index 8a183d4..8297947 100644
--- a/NativeApp/CMakeLists.txt
+++ b/NativeApp/CMakeLists.txt
@@ -462,6 +462,8 @@ if(PLATFORM_WIN32)
     target_include_directories(Diligent-NativeAppBase
     PUBLIC 
         include/Win32
+    PRIVATE
+        ${diligentcore_INCLUDEDIR}
     )
 
 elseif(PLATFORM_UNIVERSAL_WINDOWS)
@@ -495,6 +497,8 @@ elseif(PLATFORM_LINUX)
     target_include_directories(Diligent-NativeAppBase 
     PUBLIC 
         include/Linux
+    PRIVATE
+        ${diligentcore_INCLUDEDIR}
     )
     if(VULKAN_SUPPORTED)
         find_library(XCB_LIBRARY xcb)
@@ -507,6 +511,8 @@ elseif(PLATFORM_MACOS)
     target_include_directories(Diligent-NativeAppBase PUBLIC
         src/MacOS
         include/MacOS
+    PRIVATE
+        ${diligentcore_INCLUDEDIR}
     )
 elseif(PLATFORM_IOS)
     target_include_directories(Diligent-NativeAppBase PUBLIC
@@ -528,3 +534,7 @@ source_group("include" FILES ${INCLUDE})
 set_target_properties(Diligent-NativeAppBase PROPERTIES
     FOLDER DiligentTools
 )
+
+if(DILIGENT_INSTALL_TOOLS)
+    install_tools_lib(Diligent-NativeAppBase)
+endif()
diff --git a/RenderStateNotation/CMakeLists.txt b/RenderStateNotation/CMakeLists.txt
index 2f76ec8..6129db8 100644
--- a/RenderStateNotation/CMakeLists.txt
+++ b/RenderStateNotation/CMakeLists.txt
@@ -2,6 +2,7 @@ cmake_minimum_required (VERSION 3.6)
 
 project(Diligent-RenderStateNotation CXX)
 
+set(Diligent-GraphicsEngine_SOURCE_DIR ${diligentcore_INCLUDEDIR}/DiligentCore/Graphics/GraphicsEngine)
 set(REFLECTED
     ${Diligent-GraphicsEngine_SOURCE_DIR}/interface/BlendState.h
     ${Diligent-GraphicsEngine_SOURCE_DIR}/interface/DepthStencilState.h
@@ -26,8 +27,8 @@ file(COPY ../.clang-format DESTINATION "${RSN_PARSER_GENERATED_HEADERS_DIR}")
 
 find_package(Python3 REQUIRED)
 
-set(LIBCLANG_INSTALL_CMD ${Python3_EXECUTABLE} -m pip install libclang==16.0.6)
-set(JINJA2_INSTALL_CMD ${Python3_EXECUTABLE} -m pip install jinja2)
+set(LIBCLANG_INSTALL_CMD ${Python3_EXECUTABLE} -m pip install --user libclang==16.0.6)
+set(JINJA2_INSTALL_CMD ${Python3_EXECUTABLE} -m pip install --user jinja2)
 
 if(${Python3_VERSION} VERSION_GREATER_EQUAL "3.12")
     set(LIBCLANG_INSTALL_CMD ${LIBCLANG_INSTALL_CMD} --break-system-packages)
@@ -65,15 +66,9 @@ source_group("generated" FILES ${GENERATED})
 source_group("source"    FILES ${SOURCE})
 source_group("scripts"   FILES ${SCRIPTS})
 
-if (EXISTS "${CLANG_FORMAT_EXECUTABLE}")
-    set(FORMATTING_COMMAND "${CLANG_FORMAT_EXECUTABLE}" -i *.hpp --verbose)
-else()
-    set(FORMATTING_COMMAND "${CMAKE_COMMAND}" -E echo "clang-format executable is not found: RSN parser headers will not be formatted")
-endif()
 
 add_custom_command(OUTPUT ${GENERATED}
                    COMMAND ${Python3_EXECUTABLE} "${CMAKE_CURRENT_SOURCE_DIR}/scripts/cxx_generator.py" --dir "." --files ${REFLECTED}
-                   COMMAND ${FORMATTING_COMMAND}
                    WORKING_DIRECTORY "${RSN_PARSER_GENERATED_HEADERS_DIR}"
                    DEPENDS ${REFLECTED}
                    COMMENT "Generating RSN Parser Headers...")
@@ -91,7 +86,10 @@ PUBLIC
     interface
 PRIVATE
     include
-    ../../DiligentCore/Graphics/Archiver/interface
+    ${diligentcore_INCLUDEDIR}
+    ${diligentcore_INCLUDEDIR}/DiligentCore/Graphics/GraphicsEngine/interface
+    ${diligentcore_INCLUDEDIR}/DiligentCore/Graphics/Archiver/interface
+    ${nlohmann_json_INCLUDEDIR}
     ${RSN_PARSER_HEADERS_DIR}
 )
 
diff --git a/RenderStatePackager/CMakeLists.txt b/RenderStatePackager/CMakeLists.txt
index ab34ffa..87cadb3 100644
--- a/RenderStatePackager/CMakeLists.txt
+++ b/RenderStatePackager/CMakeLists.txt
@@ -22,6 +22,12 @@ add_library(Diligent-RenderStatePackagerLib STATIC
 target_include_directories(Diligent-RenderStatePackagerLib
 PUBLIC
     include
+PRIVATE
+    ${diligentcore_INCLUDEDIR}
+)
+target_link_directories(Diligent-RenderStatePackagerLib
+PRIVATE
+    ${diligentcore_LIBDIR}
 )
 
 target_link_libraries(Diligent-RenderStatePackagerLib
@@ -35,29 +41,6 @@ PUBLIC
 
 set_common_target_properties(Diligent-RenderStatePackagerLib)
 
-add_executable(Diligent-RenderStatePackager
-    src/main.cpp
-    README.md
-)
-set_common_target_properties(Diligent-RenderStatePackager)
-
-target_link_libraries(Diligent-RenderStatePackager
-PRIVATE
-    Diligent-BuildSettings
-    Diligent-Common
-    Diligent-RenderStatePackagerLib
-)
-target_include_directories(Diligent-RenderStatePackager
-PRIVATE
-    include
-    ${DILIGENT_ARGS_DIR}
-)
-
-if (DILIGENT_INSTALL_TOOLS)
-    install(TARGETS Diligent-RenderStatePackager RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>" OPTIONAL)
+if(DILIGENT_INSTALL_TOOLS)
+    install_tools_lib(Diligent-RenderStatePackagerLib)
 endif()
-
-
-set_target_properties(Diligent-RenderStatePackagerLib Diligent-RenderStatePackager PROPERTIES
-    FOLDER DiligentTools
-)
diff --git a/TextureLoader/CMakeLists.txt b/TextureLoader/CMakeLists.txt
index eb1150b..9ffcd31 100644
--- a/TextureLoader/CMakeLists.txt
+++ b/TextureLoader/CMakeLists.txt
@@ -34,17 +34,18 @@ set(SOURCE
 add_library(Diligent-TextureLoader STATIC ${SOURCE} ${INCLUDE} ${INTERFACE})
 set_common_target_properties(Diligent-TextureLoader)
 
-set_property(SOURCE src/PNGCodec.c src/Image.cpp
-APPEND PROPERTY INCLUDE_DIRECTORIES
-    "${CMAKE_CURRENT_SOURCE_DIR}/../ThirdParty/libpng" # png_static target does not define any public include directories
-    "${CMAKE_CURRENT_BINARY_DIR}/../ThirdParty/libpng" # pnglibconf.h is generated in the binary directory
-)
 
 target_include_directories(Diligent-TextureLoader
 PUBLIC
     interface
 PRIVATE
     include
+    ${diligentcore_INCLUDEDIR}
+    ${stb_INCLUDEDIR}
+    ${libpng_INCLUDEDIR}
+    ${libtiff_INCLUDEDIR}
+    ${libjpeg_INCLUDEDIR}
+    ${zlib_INCLUDEDIR}
 )
 
 source_group("source" FILES ${SOURCE})
@@ -59,15 +60,15 @@ PRIVATE
     Diligent-GraphicsEngineInterface 
     Diligent-GraphicsAccessories
     Diligent-GraphicsTools
-    PNG::PNG 
-    TIFF::TIFF
-    ZLIB::ZLIB
+    ${libpng_LINK_LIBRARIES}
+    ${libtiff_LINK_LIBRARIES}
+    ${zlib_LINK_LIBRARIES}
 )
 
-if (NOT DILIGENT_EXTERNAL_LIBJPEG)
+if (1)
     target_link_libraries(Diligent-TextureLoader
     PRIVATE
-        JPEG::JPEG
+        ${libjpeg_LINK_LIBRARIES}
     )
 else()
     target_link_libraries(Diligent-TextureLoader
diff --git a/ThirdParty/CMakeLists.txt b/ThirdParty/CMakeLists.txt
index 49129b9..eb437d5 100644
--- a/ThirdParty/CMakeLists.txt
+++ b/ThirdParty/CMakeLists.txt
@@ -12,74 +12,31 @@ elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR
 endif()
 
 
-if (NOT TARGET JPEG::JPEG)
-    add_subdirectory(libjpeg-9e)
-    install(FILES libjpeg-9e/README DESTINATION ${LICENSE_INSTALL_PATH} RENAME libjpeg-readme.txt)
-    list(APPEND THIRD_PARTY_TARGETS LibJpeg)
-endif()
-
-if (NOT TARGET TIFF::TIFF)
-    add_subdirectory(libtiff)
-    install(FILES libtiff/COPYRIGHT DESTINATION ${LICENSE_INSTALL_PATH} RENAME libtiff-copyright.txt)
-    list(APPEND THIRD_PARTY_TARGETS LibTiff)
-    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-        target_compile_options(LibTiff PRIVATE -Wno-shorten-64-to-32)
-    endif()
-endif()
-
-if (NOT TARGET ZLIB::ZLIB)
-    include(zlib.cmake)
-    install(FILES zlib/README DESTINATION ${LICENSE_INSTALL_PATH} RENAME zlib-readme.txt)
-    list(APPEND THIRD_PARTY_TARGETS ZLib)
-    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-        target_compile_options(ZLib PRIVATE -Wno-shorten-64-to-32)
-    endif()
-endif()
-
-if (NOT TARGET PNG::PNG)
-    set(PNG_BUILD_ZLIB ON CACHE BOOL "Use find_package(zlib) to find ZLib location")
-    set(PNG_SHARED OFF CACHE BOOL "Build shared version of libpng")
-    set(PNG_TOOLS OFF CACHE BOOL "Build libpng tools")
-    set(PNG_TESTS OFF CACHE BOOL "Build libpng tests")
-    set(SKIP_INSTALL_ALL ON)
-    set(PNG_FRAMEWORK OFF)
-    if(PLATFORM_TVOS)
-        # libpng does not support tvOS, but it does support iOS, so we can use the iOS target
-        set(IOS TRUE)
-    endif()
-    add_subdirectory(libpng)
-    set_target_properties(png_static PROPERTIES POSITION_INDEPENDENT_CODE ON)
-    set_directory_root_folder(libpng DiligentTools/ThirdParty/png)
-    install(FILES libpng/LICENSE DESTINATION ${LICENSE_INSTALL_PATH} RENAME lpng-license.txt)
-    add_library(PNG::PNG ALIAS png_static)
-    list(APPEND THIRD_PARTY_TARGETS png_static)
-
-    if (PLATFORM_EMSCRIPTEN)
-        set_targets_emscripten_properties(png_static)
-    endif()
-endif()
+pkg_check_modules(libpng REQUIRED libpng)
+pkg_check_modules(libtiff REQUIRED libtiff-4)
+pkg_check_modules(libjpeg REQUIRED libjpeg)
+pkg_check_modules(zlib REQUIRED zlib)
+pkg_check_modules(taywee_args REQUIRED taywee_args)
+pkg_check_modules(nlohmann_json REQUIRED nlohmann_json)
+pkg_check_modules(imgui REQUIRED imgui)
+pkg_check_modules(diligentcore REQUIRED diligentcore)
+pkg_check_modules(stb REQUIRED stb)
+pkg_check_modules(tinygltf REQUIRED tinygltf)
 
 
 if (NOT DILIGENT_ARGS_DIR)
-    set(DILIGENT_ARGS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/args" CACHE PATH "args source directory")
+    set(DILIGENT_ARGS_DIR "${taywee_args_INCLUDEDIR}" CACHE PATH "args source directory")
 endif()
 if (NOT EXISTS "${DILIGENT_ARGS_DIR}/args.hxx")
     message(FATAL_ERROR "${DILIGENT_ARGS_DIR}/args.hxx does not exist. This indicates that args submodule is not checked out or DILIGENT_ARGS_DIR variable contains invalid path.")
 endif()
-install(FILES "${DILIGENT_ARGS_DIR}/LICENSE" DESTINATION ${LICENSE_INSTALL_PATH} RENAME args-license.txt)
 
 if(NOT IMGUIZMO_QUAT_PATH)
     set(IMGUIZMO_QUAT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/imGuIZMO.quat CACHE PATH "imGuIZMO.quat source directory")
 endif()
 
-install(FILES tinygltf/LICENSE DESTINATION ${LICENSE_INSTALL_PATH} RENAME tinygltf-license.txt)
-install(FILES imGuIZMO.quat/license.txt DESTINATION ${LICENSE_INSTALL_PATH} RENAME imGuIZMO.quat-license.txt)
-install(FILES stb/LICENSE DESTINATION "${LICENSE_INSTALL_PATH}" RENAME stb-license.txt)
-install(FILES json/LICENSE.MIT DESTINATION ${LICENSE_INSTALL_PATH} RENAME json-license.txt)
-
-
 add_library(Diligent-JSON INTERFACE)
-target_include_directories(Diligent-JSON INTERFACE json/single_include/nlohmann)
+target_include_directories(Diligent-JSON INTERFACE ${nlohmann_json_INCLUDEDIR})
 # WARNING: JSON_DIAGNOSTICS must be consistently defined for all inclusions of json.hpp,
 #          or there will be hard-to-diagnose run-time crashes.
 #          It is required by RenderStatePackager even in release builds.
@@ -87,26 +44,21 @@ target_compile_definitions(Diligent-JSON INTERFACE JSON_DIAGNOSTICS=1)
 
 
 if (NOT DILIGENT_DEAR_IMGUI_PATH)
-    set(DILIGENT_DEAR_IMGUI_PATH "${CMAKE_CURRENT_SOURCE_DIR}/imgui" CACHE PATH "imgui source directory")
+    set(DILIGENT_DEAR_IMGUI_PATH "${imgui_INCLUDEDIR}" CACHE PATH "imgui source directory")
 endif()
 if (NOT EXISTS "${DILIGENT_DEAR_IMGUI_PATH}/imgui.h")
     message(FATAL_ERROR "${DILIGENT_DEAR_IMGUI_PATH}/imgui.h does not exist. This inidcates that imgui submodule is not checked out or DILIGENT_DEAR_IMGUI_PATH variable contains invalid path.")
 endif()
-install(FILES "${DILIGENT_DEAR_IMGUI_PATH}/LICENSE.txt" DESTINATION ${LICENSE_INSTALL_PATH} RENAME imgui-license.txt)
 
-if (DILIGENT_ENABLE_DRACO AND (NOT TARGET draco) AND (NOT TARGET draco_static))
-    message("Fetching Draco repository - this may take a few moments...")
-    include(FetchContent)
-    FetchContent_Declare(
-        draco
-        GIT_REPOSITORY https://github.com/google/draco
-        GIT_TAG        1.5.6
-    )
-    FetchContent_MakeAvailable(draco)
-    set_directory_root_folder(${draco_SOURCE_DIR} DiligentTools/ThirdParty/draco)
+if (DILIGENT_ENABLE_DRACO)
+    pkg_check_modules(draco REQUIRED draco)
+endif()
+
+if(DILIGENT_USE_RAPIDJSON)
+    pkg_check_modules(rapidjson REQUIRED RapidJSON)
 endif()
 
-if(DILIGENT_INSTALL_TOOLS)
+if(0)
     install(TARGETS ${THIRD_PARTY_TARGETS}
             ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>"
             LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${DILIGENT_TOOLS_DIR}/$<CONFIG>"
