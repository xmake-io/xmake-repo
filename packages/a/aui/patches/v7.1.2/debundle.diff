diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6902d56a..98ebd001 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -64,9 +64,13 @@ function(define_aui_component AUI_COMPONENT_NAME)
     add_subdirectory("aui.${AUI_COMPONENT_NAME}")
 endfunction()
 
-auib_import(ZLIB https://github.com/aui-framework/zlib
-            VERSION 448a9c76a97202a21f68bd82e453dd743e944a3a
-            CMAKE_ARGS -DZLIB_BUILD_EXAMPLES=OFF)
+if (AUIB_DISABLE)
+    find_package(ZLIB REQUIRED)
+else ()
+    auib_import(ZLIB https://github.com/aui-framework/zlib
+                VERSION 448a9c76a97202a21f68bd82e453dd743e944a3a
+                CMAKE_ARGS -DZLIB_BUILD_EXAMPLES=OFF)
+endif ()
 
 # define all components
 define_aui_component(core)
@@ -195,7 +199,9 @@ auib_precompiled_binary()
 # [auib_precompiled_binary]
 
 # test aui.boot on ci/cd
-add_subdirectory(test/)
+if (NOT AUIB_DISABLE)
+    add_subdirectory(test/)
+endif ()
 
 # [configure file example]
 configure_file(cmake/aui-config.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/aui-config.cmake @ONLY)
diff --git a/aui.audio/CMakeLists.txt b/aui.audio/CMakeLists.txt
index 21e44153..e3154d7f 100644
--- a/aui.audio/CMakeLists.txt
+++ b/aui.audio/CMakeLists.txt
@@ -5,26 +5,36 @@ add_subdirectory(3rdparty/ogg)
 aui_link(aui.audio PUBLIC aui::core)
 
 if (AUI_PLATFORM_ANDROID)
-    auib_import(oboe https://github.com/google/oboe ADD_SUBDIRECTORY VERSION main)
-    aui_link(aui.audio PUBLIC oboe $<LINK_ONLY:log> $<LINK_ONLY:OpenSLES>)
+    if (AUIB_DISABLE)
+        find_package(oboe CONFIG REQUIRED)
+        aui_link(aui.audio PUBLIC oboe::oboe $<LINK_ONLY:log> $<LINK_ONLY:OpenSLES>)
+    else ()
+        auib_import(oboe https://github.com/google/oboe ADD_SUBDIRECTORY VERSION main)
+        aui_link(aui.audio PUBLIC oboe $<LINK_ONLY:log> $<LINK_ONLY:OpenSLES>)
 
-    install(
-            TARGETS oboe
-            EXPORT aui
-            ARCHIVE       DESTINATION "aui.audio/lib"
-            LIBRARY       DESTINATION "aui.audio/lib"
-            RUNTIME       DESTINATION "aui.audio/bin"
-            PUBLIC_HEADER DESTINATION "aui.audio/include"
-            INCLUDES      DESTINATION "aui.audio/include"
-    )
+        install(
+                TARGETS oboe
+                EXPORT aui
+                ARCHIVE       DESTINATION "aui.audio/lib"
+                LIBRARY       DESTINATION "aui.audio/lib"
+                RUNTIME       DESTINATION "aui.audio/bin"
+                PUBLIC_HEADER DESTINATION "aui.audio/include"
+                INCLUDES      DESTINATION "aui.audio/include"
+        )
+    endif ()
 elseif (AUI_PLATFORM_LINUX)
     aui_link(aui.audio PUBLIC pulse)
 elseif (AUI_PLATFORM_WIN)
     aui_link(aui.audio PUBLIC Winmm dsound.lib dxguid.lib)
 endif()
 
-auib_import(Opus https://github.com/xiph/opus.git VERSION v1.4)
-aui_link(aui.audio PRIVATE Opus::opus)
+if (AUIB_DISABLE)
+    find_package(opus CONFIG REQUIRED)
+    aui_link(aui.audio PRIVATE Opus::opus)
+else ()
+    auib_import(Opus https://github.com/xiph/opus.git VERSION v1.4)
+    aui_link(aui.audio PRIVATE Opus::opus)
+endif ()
 
 if (AUI_PLATFORM_IOS OR AUI_PLATFORM_MACOS)
     auib_use_system_libs_begin()
@@ -42,9 +52,15 @@ if (AUI_PLATFORM_MACOS)
 					   "-framework QuartzCore")
 endif()
 
-auib_import(soxr https://github.com/aui-framework/soxr
-            ADD_SUBDIRECTORY
-            VERSION adacc686124ac3568432f3dca388878963a005ee
-            )
+if (AUIB_DISABLE)
+    include(FindPkgConfig)
+    pkg_check_modules(soxr REQUIRED IMPORTED_TARGET soxr)
+    aui_link(aui.audio PRIVATE PkgConfig::soxr)
+else ()
+    auib_import(soxr https://github.com/aui-framework/soxr
+                ADD_SUBDIRECTORY
+                VERSION adacc686124ac3568432f3dca388878963a005ee
+                )
 
-aui_link(aui.audio PRIVATE soxr)
+    aui_link(aui.audio PRIVATE soxr)
+endif ()
diff --git a/aui.core/CMakeLists.txt b/aui.core/CMakeLists.txt
index 6aa1b072..01e3fe81 100644
--- a/aui.core/CMakeLists.txt
+++ b/aui.core/CMakeLists.txt
@@ -6,7 +6,9 @@ option(AUI_ENABLE_ASAN "Enable AddressSanitizer" OFF)
 option(AUI_ENABLE_DEATH_TESTS "Enable GTest death tests" ON)
 
 aui_module(aui.core EXPORT aui)
-aui_enable_tests(aui.core)
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.core)
+endif ()
 aui_enable_benchmarks(aui.core)
 
 
@@ -49,8 +51,12 @@ if (NOT WIN32)
     endif()
 
     if (AUI_PLATFORM_LINUX)
-        auib_import(backtrace https://github.com/aui-framework/libbacktrace
-                    VERSION a5a32e3cc8e22a9fc40689a884b032c52ee3f88e)
+        if (AUIB_DISABLE)
+            find_package(libbacktrace CONFIG REQUIRED)
+        else ()
+            auib_import(backtrace https://github.com/aui-framework/libbacktrace
+                        VERSION a5a32e3cc8e22a9fc40689a884b032c52ee3f88e)
+        endif ()
         set(_use_backtrace TRUE)
     else()
 
@@ -84,7 +90,11 @@ endif()
 
 if(_use_backtrace)
     message(STATUS "Stacktrace backend: backtrace")
-    aui_link(aui.core PRIVATE backtrace)
+    if (AUIB_DISABLE)
+        aui_link(aui.core PRIVATE libbacktrace::libbacktrace)
+    else ()
+        aui_link(aui.core PRIVATE backtrace)
+    endif ()
     target_compile_definitions(aui.core PRIVATE AUI_USE_BACKTRACE=1)
 elseif(_use_unwind)
     message(STATUS "Stacktrace backend: unwind")
@@ -146,17 +156,22 @@ if (AUI_SHARED_PTR_FIND_INSTANCES)
 endif()
 
 
-# [auib_import examples]
-auib_import(fmt https://github.com/fmtlib/fmt
-            VERSION 9.1.0
-            CMAKE_ARGS -DFMT_TEST=FALSE -DFMT_DOC=FALSE)
-
-auib_import(range-v3 https://github.com/ericniebler/range-v3
-        VERSION 0.12.0
-        CMAKE_ARGS -DRANGE_V3_DOCS=OFF -DRANGE_V3_TESTS=OFF -DRANGE_V3_EXAMPLES=OFF -DRANGE_V3_PERF=OFF -DRANGE_V3_HEADER_CHECKS=OFF)
-# [auib_import examples]
-
-aui_link(aui.core PUBLIC fmt::fmt-header-only range-v3::range-v3)
+if (AUIB_DISABLE)
+    find_package(fmt CONFIG REQUIRED)
+    find_package(range-v3 CONFIG REQUIRED)
+    aui_link(aui.core PUBLIC fmt::fmt range-v3::range-v3)
+else ()
+    # [auib_import examples]
+    auib_import(fmt https://github.com/fmtlib/fmt
+                VERSION 9.1.0
+                CMAKE_ARGS -DFMT_TEST=FALSE -DFMT_DOC=FALSE)
+    auib_import(range-v3 https://github.com/ericniebler/range-v3
+            VERSION 0.12.0
+            CMAKE_ARGS -DRANGE_V3_DOCS=OFF -DRANGE_V3_TESTS=OFF -DRANGE_V3_EXAMPLES=OFF -DRANGE_V3_PERF=OFF -DRANGE_V3_HEADER_CHECKS=OFF)
+    # [auib_import examples]
+
+    aui_link(aui.core PUBLIC fmt::fmt-header-only range-v3::range-v3)
+endif ()
 
 # segfault functionality
 if (NOT MSVC AND AUI_CATCH_UNHANDLED)
diff --git a/aui.crypt/CMakeLists.txt b/aui.crypt/CMakeLists.txt
index c5354f2e..9c194be4 100644
--- a/aui.crypt/CMakeLists.txt
+++ b/aui.crypt/CMakeLists.txt
@@ -3,10 +3,16 @@ cmake_minimum_required(VERSION 3.10)
 
 unset(OPENSSL_CRYPTO_LIBRARY CACHE)
 unset(OPENSSL_SSL_LIBRARY CACHE)
-auib_import(OpenSSL https://github.com/aui-framework/openssl-cmake/archive/56ee19b7e11b418e0f29825414abdca96ff6b83e.zip ARCHIVE)
+if (AUIB_DISABLE)
+    find_package(OpenSSL CONFIG REQUIRED)
+else ()
+    auib_import(OpenSSL https://github.com/aui-framework/openssl-cmake/archive/56ee19b7e11b418e0f29825414abdca96ff6b83e.zip ARCHIVE)
+endif ()
 
 aui_module(aui.crypt EXPORT aui)
-aui_enable_tests(aui.crypt)
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.crypt)
+endif ()
 aui_link(aui.crypt PUBLIC aui::core)
 target_include_directories(aui.crypt PRIVATE ${OPENSSL_INCLUDE_DIR})
 aui_link(aui.crypt PRIVATE OpenSSL::SSL OpenSSL::Crypto)
diff --git a/aui.curl/CMakeLists.txt b/aui.curl/CMakeLists.txt
index 5141c8ee..00be58b4 100644
--- a/aui.curl/CMakeLists.txt
+++ b/aui.curl/CMakeLists.txt
@@ -1,9 +1,15 @@
 cmake_minimum_required(VERSION 3.10)
 
-auib_import(CURL https://github.com/aui-framework/curl/archive/refs/heads/master.zip
-            ARCHIVE)
+if (AUIB_DISABLE)
+    find_package(CURL CONFIG REQUIRED)
+else ()
+    auib_import(CURL https://github.com/aui-framework/curl/archive/refs/heads/master.zip
+                ARCHIVE)
+endif ()
 
 aui_module(aui.curl EXPORT aui WHOLEARCHIVE)
-aui_enable_tests(aui.curl)
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.curl)
+endif ()
 aui_link(aui.curl PUBLIC aui::core aui::json)
 aui_link(aui.curl PRIVATE CURL::libcurl aui::crypt)
diff --git a/aui.image/CMakeLists.txt b/aui.image/CMakeLists.txt
index 033e7ad5..a272f2b9 100644
--- a/aui.image/CMakeLists.txt
+++ b/aui.image/CMakeLists.txt
@@ -1,8 +1,11 @@
 cmake_minimum_required(VERSION 3.10)
 
-auib_import(lunasvg https://github.com/aui-framework/lunasvg
-            VERSION 272ceee)
-
+if (AUIB_DISABLE)
+    find_package(lunasvg CONFIG REQUIRED)
+else ()
+    auib_import(lunasvg https://github.com/aui-framework/lunasvg
+                VERSION 272ceee)
+endif ()
 
 set(WEBP_COMPONENTS_TO_DISABLE ANIM_UTILS CWEBP DWEBP GIF2WEBP IMG2WEBP VWEBP WEBPINFO LIBWEBPMUX WEBPMUX EXTRAS)
 
@@ -10,9 +13,16 @@ foreach(_component ${WEBP_COMPONENTS_TO_DISABLE})
     list(APPEND WEBP_CMAKE_ARGS "-DWEBP_BUILD_${_component}=OFF")
 endforeach()
 
-auib_import(WebP https://github.com/webmproject/libwebp VERSION 1.3.1 CMAKE_ARGS ${WEBP_CMAKE_ARGS})
+if (AUIB_DISABLE)
+    find_package(WebP CONFIG REQUIRED)
+else ()
+    auib_import(WebP https://github.com/webmproject/libwebp VERSION 1.3.1 CMAKE_ARGS ${WEBP_CMAKE_ARGS})
+endif ()
 
 aui_module(aui.image WHOLEARCHIVE EXPORT aui)
 add_subdirectory(3rdparty)
 aui_link(aui.image PRIVATE aui::core lunasvg::lunasvg WebP::webp WebP::webpdemux)
-aui_enable_tests(aui.image)
+
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.image)
+endif ()
diff --git a/aui.image/src/AUI/Image/svg/SvgImageFactory.cpp b/aui.image/src/AUI/Image/svg/SvgImageFactory.cpp
index 7b638202..c4449d5b 100644
--- a/aui.image/src/AUI/Image/svg/SvgImageFactory.cpp
+++ b/aui.image/src/AUI/Image/svg/SvgImageFactory.cpp
@@ -15,7 +15,15 @@
 
 #include "SvgImageFactory.h"
 #include "AUI/Common/AByteBuffer.h"
-#include <lunasvg/lunasvg.h>
+#if defined(__has_include)
+    #if __has_include(<lunasvg/lunasvg.h>)
+        #include <lunasvg/lunasvg.h>
+    #else
+        #include <lunasvg.h>
+    #endif
+#else
+    #include <lunasvg.h>
+#endif
 
 
 SvgImageFactory::SvgImageFactory(AByteBufferView buf) {
diff --git a/aui.json/CMakeLists.txt b/aui.json/CMakeLists.txt
index d0190bd5..980456da 100644
--- a/aui.json/CMakeLists.txt
+++ b/aui.json/CMakeLists.txt
@@ -3,7 +3,9 @@ cmake_minimum_required(VERSION 3.10)
 aui_module(aui.json EXPORT aui)
 
 aui_link(aui.json PRIVATE aui::core)
-aui_enable_tests(aui.json)
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.json)
+endif ()
 aui_enable_benchmarks(aui.json)
 if (TARGET Benchmarks)
     # curl needed to download the benchmark data
diff --git a/aui.network/CMakeLists.txt b/aui.network/CMakeLists.txt
index bb668703..1f85acd3 100644
--- a/aui.network/CMakeLists.txt
+++ b/aui.network/CMakeLists.txt
@@ -9,4 +9,6 @@ if(WIN32)
   target_compile_definitions(aui.network PRIVATE PIO_APC_ROUTINE_DEFINED=1)
 endif()
 
-aui_enable_tests(aui.network)
\ No newline at end of file
+if (NOT AUIB_DISABLE)
+  aui_enable_tests(aui.network)
+endif()
\ No newline at end of file
diff --git a/aui.sqlite/CMakeLists.txt b/aui.sqlite/CMakeLists.txt
index 6afd58f4..78a2a593 100644
--- a/aui.sqlite/CMakeLists.txt
+++ b/aui.sqlite/CMakeLists.txt
@@ -11,4 +11,6 @@ target_include_directories(aui.sqlite PRIVATE 3rdparty/sqlite3)
 aui_link(aui.sqlite PUBLIC aui::core)
 aui_link(aui.sqlite PUBLIC aui::data)
 
-aui_enable_tests(aui.sqlite)
\ No newline at end of file
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.sqlite)
+endif ()
\ No newline at end of file
diff --git a/aui.toolbox/CMakeLists.txt b/aui.toolbox/CMakeLists.txt
index c17cb1da..aa088ce4 100644
--- a/aui.toolbox/CMakeLists.txt
+++ b/aui.toolbox/CMakeLists.txt
@@ -7,4 +7,6 @@ endif()
 
 aui_executable(aui.toolbox WIN32_SUBSYSTEM_CONSOLE EXPORT aui)
 aui_link(aui.toolbox PRIVATE aui::core aui::crypt aui::image)
-aui_enable_tests(aui.toolbox)
\ No newline at end of file
+if (NOT AUIB_DISABLE)
+    aui_enable_tests(aui.toolbox)
+endif ()
\ No newline at end of file
diff --git a/aui.uitests/CMakeLists.txt b/aui.uitests/CMakeLists.txt
index 5070f0a3..e4188094 100644
--- a/aui.uitests/CMakeLists.txt
+++ b/aui.uitests/CMakeLists.txt
@@ -8,9 +8,13 @@ aui_module(aui.uitests EXPORT aui)
 
 aui_link(aui.uitests PRIVATE aui::core aui::views)
 
-if (TARGET GTest::gmock)
-  aui_link(aui.uitests PRIVATE GTest::gmock)
-endif()
+if (AUIB_DISABLE)
+    aui_link(aui.uitests PRIVATE gmock::gmock)
+else ()
+  if (TARGET GTest::gmock)
+    aui_link(aui.uitests PRIVATE GTest::gmock)
+  endif()
+endif ()
 
 aui_enable_tests(aui.uitests)
 aui_enable_benchmarks(aui.uitests)
diff --git a/aui.views/CMakeLists.txt b/aui.views/CMakeLists.txt
index dfe6b18b..ac4d3cf6 100644
--- a/aui.views/CMakeLists.txt
+++ b/aui.views/CMakeLists.txt
@@ -9,10 +9,14 @@ find_package(OpenGL)
 auib_use_system_libs_end()
 
 if (OPENGL_FOUND OR ANDROID OR IOS)
-    auib_import(Freetype https://github.com/freetype/freetype/archive/refs/tags/VER-2-13-3.zip ARCHIVE
-                CONFIG_ONLY
-                CMAKE_ARGS -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_BROTLI=ON
-    )
+    if (AUIB_DISABLE)
+        find_package(freetype CONFIG REQUIRED)
+    else ()
+        auib_import(Freetype https://github.com/freetype/freetype/archive/refs/tags/VER-2-13-3.zip ARCHIVE
+                    CONFIG_ONLY
+                    CMAKE_ARGS -DFT_DISABLE_BZIP2=ON -DFT_DISABLE_PNG=ON -DFT_DISABLE_HARFBUZZ=ON -DFT_DISABLE_BROTLI=ON
+        )
+    endif ()
 
     if (NOT TARGET Freetype::Freetype)
         message(FATAL_ERROR "Freetype not imported")
@@ -20,9 +24,13 @@ if (OPENGL_FOUND OR ANDROID OR IOS)
 
 
     if (AUI_PLATFORM_WIN OR AUI_PLATFORM_LINUX OR AUI_PLATFORM_MACOS)
-        auib_import(GLEW https://github.com/aui-framework/glew-cmake
-                CMAKE_WORKING_DIR "build/cmake"
-                VERSION a80a1dc)
+        if (AUIB_DISABLE)
+            find_package(glew CONFIG REQUIRED)
+        else ()
+            auib_import(GLEW https://github.com/aui-framework/glew-cmake
+                    CMAKE_WORKING_DIR "build/cmake"
+                    VERSION a80a1dc)
+        endif ()
     endif ()
 
     aui_module(aui.views EXPORT aui)
@@ -92,17 +100,33 @@ if (OPENGL_FOUND OR ANDROID OR IOS)
         aui_link(aui.views PRIVATE Freetype::Freetype)
         aui_link(aui.views PRIVATE OpenGL::GL)
 
-        if (AUI_PLATFORM_LINUX)
-            # glew defines unwanted dependencies to OpenGL which may vary from distro to distro; silence them
-            set_target_properties(GLEW::GLEW PROPERTIES INTERFACE_LINK_LIBRARIES "")
+        if (AUIB_DISABLE)
+            if (AUI_PLATFORM_LINUX)
+                
+                # glew defines unwanted dependencies to OpenGL which may vary from distro to distro; silence them
+                set_target_properties(glew::glew PROPERTIES INTERFACE_LINK_LIBRARIES "")
 
-            auib_use_system_libs_begin()
-            find_package(X11 REQUIRED)
-            find_package(Fontconfig REQUIRED)
-            auib_use_system_libs_end()
+                auib_use_system_libs_begin()
+                find_package(X11 REQUIRED)
+                find_package(Fontconfig REQUIRED)
+                auib_use_system_libs_end()
 
+            endif ()
+            aui_link(aui.views PUBLIC glew::glew)
+        else ()
+            if (AUI_PLATFORM_LINUX)
+                
+                # glew defines unwanted dependencies to OpenGL which may vary from distro to distro; silence them
+                set_target_properties(GLEW::GLEW PROPERTIES INTERFACE_LINK_LIBRARIES "")
+
+                auib_use_system_libs_begin()
+                find_package(X11 REQUIRED)
+                find_package(Fontconfig REQUIRED)
+                auib_use_system_libs_end()
+
+            endif ()
+            aui_link(aui.views PUBLIC GLEW::GLEW)
         endif ()
-        aui_link(aui.views PUBLIC GLEW::GLEW)
 
         if (WIN32)
             aui_link(aui.views PRIVATE dwmapi)
diff --git a/cmake/aui.build.cmake b/cmake/aui.build.cmake
index 90c53d45..f980b2a3 100644
--- a/cmake/aui.build.cmake
+++ b/cmake/aui.build.cmake
@@ -218,23 +218,33 @@ function(aui_add_properties AUI_MODULE_NAME)
 endfunction(aui_add_properties)
 
 # gtest
-macro(_aui_import_gtest)
-    if (NOT TARGET GTest::gtest)
-        auib_import(GTest https://github.com/google/googletest
-                    VERSION v1.14.0
-                    CMAKE_ARGS -Dgtest_force_shared_crt=TRUE
-                    LINK STATIC)
-        set_property(TARGET GTest::gtest PROPERTY IMPORTED_GLOBAL TRUE)
-        set_property(TARGET GTest::gmock PROPERTY IMPORTED_GLOBAL TRUE)
-    endif()
+macro(_aui_import_gtest AUIB_DISABLE)
+    if (AUIB_DISABLE)
+        find_package(gtest CONFIG REQUIRED)
+        get_target_property(GTEST_TARGET_IMPORTED_GLOBAL gtest::gtest IMPORTED_GLOBAL)
+        if (NOT GTEST_TARGET_IMPORTED_GLOBAL)
+            set_target_properties(gtest::gtest PROPERTIES IMPORTED_GLOBAL TRUE)
+        endif ()
+        find_package(gmock CONFIG REQUIRED)
+        get_target_property(GMOCK_TARGET_IMPORTED_GLOBAL gmock::gmock IMPORTED_GLOBAL)
+        if (NOT GMOCK_TARGET_IMPORTED_GLOBAL)
+            set_target_properties(gmock::gmock PROPERTIES IMPORTED_GLOBAL TRUE)
+        endif ()
+    else ()
+        if (NOT TARGET GTest::gtest)
+            auib_import(GTest https://github.com/google/googletest
+                        VERSION v1.14.0
+                        CMAKE_ARGS -Dgtest_force_shared_crt=TRUE
+                        LINK STATIC)
+            set_property(TARGET GTest::gtest PROPERTY IMPORTED_GLOBAL TRUE)
+            set_property(TARGET GTest::gmock PROPERTY IMPORTED_GLOBAL TRUE)
+        endif()
+    endif ()
 endmacro()
 
 macro(aui_enable_tests AUI_MODULE_NAME)
     if (NOT CMAKE_CROSSCOMPILING)
-        _aui_import_gtest()
-        if (NOT TARGET GTest::gtest)
-            message(FATAL_ERROR "GTest::gtest not found!")
-        endif()
+        _aui_import_gtest(ON)
 
         enable_testing()
         get_property(_source_dir TARGET ${AUI_MODULE_NAME} PROPERTY SOURCE_DIR)
@@ -268,7 +278,11 @@ macro(aui_enable_tests AUI_MODULE_NAME)
             #gtest_add_tests(TARGET ${TESTS_MODULE_NAME})
             set_property(TARGET ${TESTS_MODULE_NAME} PROPERTY CXX_STANDARD 20)
             target_include_directories(${TESTS_MODULE_NAME} PUBLIC tests)
-            target_link_libraries(${TESTS_MODULE_NAME} PUBLIC GTest::gmock)
+            if (AUIB_DISABLE)
+                target_link_libraries(${TESTS_MODULE_NAME} PUBLIC gmock::gmock)
+            else ()
+                target_link_libraries(${TESTS_MODULE_NAME} PUBLIC GTest::gmock)
+            endif ()
 
             target_compile_definitions(${TESTS_MODULE_NAME} PUBLIC AUI_TESTS_MODULE=1)
 
@@ -317,20 +331,32 @@ endmacro()
 
 # google benchmark
 
-macro(_aui_import_google_benchmark)
-    if (NOT TARGET benchmark::benchmark)
-        auib_import(benchmark https://github.com/google/benchmark
-                    VERSION v1.8.3
-                    CMAKE_ARGS -DBENCHMARK_ENABLE_GTEST_TESTS=OFF
-                    LINK STATIC)
-        set_property(TARGET benchmark::benchmark PROPERTY IMPORTED_GLOBAL TRUE)
-    endif()
+macro(_aui_import_google_benchmark AUIB_DISABLE)
+    if (AUIB_DISABLE)
+        find_package(benchmark CONFIG REQUIRED)
+        get_target_property(BENCHMARK_TARGET_IMPORTED_GLOBAL benchmark::benchmark IMPORTED_GLOBAL)
+        if (NOT BENCHMARK_TARGET_IMPORTED_GLOBAL)
+            set_target_properties(benchmark::benchmark PROPERTIES IMPORTED_GLOBAL TRUE)
+        endif ()
+        get_target_property(BENCHMARK_MAIN_TARGET_IMPORTED_GLOBAL benchmark::benchmark_main IMPORTED_GLOBAL)
+        if (NOT BENCHMARK_MAIN_TARGET_IMPORTED_GLOBAL)
+            set_target_properties(benchmark::benchmark_main PROPERTIES IMPORTED_GLOBAL TRUE)
+        endif ()
+    else ()
+        if (NOT TARGET benchmark::benchmark)
+            auib_import(benchmark https://github.com/google/benchmark
+                        VERSION v1.8.3
+                        CMAKE_ARGS -DBENCHMARK_ENABLE_GTEST_TESTS=OFF
+                        LINK STATIC)
+            set_property(TARGET benchmark::benchmark PROPERTY IMPORTED_GLOBAL TRUE)
+        endif()
+    endif ()
 endmacro()
 
 macro(aui_enable_benchmarks AUI_MODULE_NAME)
     if (NOT CMAKE_CROSSCOMPILING)
-        _aui_import_gtest()
-        _aui_import_google_benchmark()
+        _aui_import_gtest(ON)
+        _aui_import_google_benchmark(ON)
         if (NOT TARGET benchmark::benchmark)
             message(FATAL_ERROR "benchmark::benchmark not found!")
         endif()
