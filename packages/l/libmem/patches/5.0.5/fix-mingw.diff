diff --git a/src/win/memory.c b/src/win/memory.c
index 07a4024..1f26ffb 100644
--- a/src/win/memory.c
+++ b/src/win/memory.c
@@ -50,8 +50,13 @@ LM_ReadMemoryEx(const lm_process_t *process,
 	if (!hproc)
 		return 0;
 
+	#if defined(__MINGW32__)
+	if (!ReadProcessMemory(hproc, (LPCVOID)source, dest, size, &bytes_read))
+		bytes_read = 0;
+	#else
 	if (!ReadProcessMemory(hproc, source, dest, size, &bytes_read))
 		bytes_read = 0;
+	#endif
 
 	close_handle(hproc);
 	return (lm_size_t)bytes_read;
@@ -75,8 +80,13 @@ LM_WriteMemoryEx(const lm_process_t *process,
 	if (!hproc)
 		return 0;
 
+	#if defined(__MINGW32__)
+	if (!WriteProcessMemory(hproc, (LPVOID)dest, source, size, &bytes_written))
+		bytes_written = 0;
+	#else
 	if (!WriteProcessMemory(hproc, dest, source, size, &bytes_written))
 		bytes_written = 0;
+	#endif
 
 	close_handle(hproc);
 	return (lm_size_t)bytes_written;
@@ -100,8 +110,13 @@ LM_ProtMemory(lm_address_t address,
 		size = get_page_size();
 
 	osprot = get_os_prot(prot);
+	#if defined(__MINGW32__)
+	if (!VirtualProtect((LPVOID)address, size, osprot, &old_osprot))
+		return LM_FALSE;
+	#else
 	if (!VirtualProtect(address, size, osprot, &old_osprot))
 		return LM_FALSE;
+	#endif
 
 	if (oldprot_out)
 		*oldprot_out = get_prot(old_osprot);
@@ -134,8 +149,13 @@ LM_ProtMemoryEx(const lm_process_t *process,
 		return result;
 
 	osprot = get_os_prot(prot);
+	#if defined(__MINGW32__)
+	if (!VirtualProtectEx(hproc, (LPVOID)address, size, osprot, &old_osprot))
+		goto CLOSE_EXIT;
+	#else
 	if (!VirtualProtectEx(hproc, address, size, osprot, &old_osprot))
 		goto CLOSE_EXIT;
+	#endif
 
 	if (oldprot_out)
 		*oldprot_out = get_prot(old_osprot);
@@ -212,7 +232,11 @@ LM_FreeMemory(lm_address_t alloc,
 	 */
 
 	size = 0;
+	#if defined(__MINGW32__)
+	return VirtualFree((LPVOID)alloc, size, MEM_RELEASE) ? LM_TRUE : LM_FALSE;
+	#else
 	return VirtualFree(alloc, size, MEM_RELEASE) ? LM_TRUE : LM_FALSE;
+	#endif
 }
 
 /********************************/
@@ -233,7 +257,11 @@ LM_FreeMemoryEx(const lm_process_t *process,
 		return LM_FALSE;
 
 	size = 0;
+	#if defined(__MINGW32__)
+	ret = VirtualFreeEx(hproc, (LPVOID)alloc, size, MEM_RELEASE);
+	#else
 	ret = VirtualFreeEx(hproc, alloc, size, MEM_RELEASE);
+	#endif
 
 	close_handle(hproc);
 
